schema {
  query: Query
}

"The UnsignedLong scalar type represents a unsigned 64-bit numeric non-fractional value greater than or equal to 0."
scalar UnsignedLong

"GraphQL query for fetching trustlist user records."
type Query {
  "Fetches trustlist entries"
  entries(where: TrustlistEntryFilterInput order: [TrustlistEntrySortInput!]): [TrustlistEntry]
  "Fetches trustlist emitters"
  emitters(where: EmitterFilterInput order: [EmitterSortInput!]): [Emitter]
}

input TrustlistEntryFilterInput {
  and: [TrustlistEntryFilterInput!]
  or: [TrustlistEntryFilterInput!]
  id: ComparableGuidOperationFilterInput
  userId: ComparableUInt64OperationFilterInput
  entryAt: ComparableDateTimeOperationFilterInput
  lastEscalated: ComparableDateTimeOperationFilterInput
  escalationLevel: ComparableByteOperationFilterInput
  escalationNote: StringOperationFilterInput
  emitterId: StringOperationFilterInput
  emitter: EmitterFilterInput
}

input TrustlistEntrySortInput {
  id: SortEnumType
  userId: SortEnumType
  entryAt: SortEnumType
  lastEscalated: SortEnumType
  escalationLevel: SortEnumType
  escalationNote: SortEnumType
  emitterId: SortEnumType
  emitter: EmitterSortInput
}

input EmitterFilterInput {
  and: [EmitterFilterInput!]
  or: [EmitterFilterInput!]
  login: StringOperationFilterInput
  emitterType: EmitterTypeOperationFilterInput
  snowflake: ComparableUInt64OperationFilterInput
  displayName: StringOperationFilterInput
}

input EmitterSortInput {
  login: SortEnumType
  emitterType: SortEnumType
  snowflake: SortEnumType
  displayName: SortEnumType
}

input ComparableGuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID!]
  nin: [UUID!]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input ComparableUInt64OperationFilterInput {
  eq: UnsignedLong
  neq: UnsignedLong
  in: [UnsignedLong!]
  nin: [UnsignedLong!]
  gt: UnsignedLong
  ngt: UnsignedLong
  gte: UnsignedLong
  ngte: UnsignedLong
  lt: UnsignedLong
  nlt: UnsignedLong
  lte: UnsignedLong
  nlte: UnsignedLong
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableByteOperationFilterInput {
  eq: Byte
  neq: Byte
  in: [Byte!]
  nin: [Byte!]
  gt: Byte
  ngt: Byte
  gte: Byte
  ngte: Byte
  lt: Byte
  nlt: Byte
  lte: Byte
  nlte: Byte
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

input EmitterTypeOperationFilterInput {
  eq: EmitterType
  neq: EmitterType
  in: [EmitterType!]
  nin: [EmitterType!]
}

type TrustlistEntry {
  id: UUID!
  userId: UnsignedLong!
  entryAt: DateTime!
  lastEscalated: DateTime!
  escalationLevel: Byte!
  escalationNote: String!
  emitterId: String!
  emitter: Emitter
}

type Emitter {
  login: String!
  emitterType: EmitterType!
  snowflake: UnsignedLong!
  displayName: String!
}

scalar UUID

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

enum EmitterType {
  UNKNOWN
  USER
  SERVER
}