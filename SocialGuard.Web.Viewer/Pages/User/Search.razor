@page "/user"
@page "/user/{UserIdStr}"
@inject NavigationManager NavigationManager


<div class="row justify-content-around text-center mb-5">
	<div class="col col-lg-8">
		<h3 class="my-3">Search for User :</h3>

		<EditForm EditContext=EditContext>
			<DataAnnotationsValidator />

			<div class="input-group input-group-lg">
				<InputText @bind-Value=Model.SearchStr class="form-control" placeholder="User Snowflake" />
			</div>

			<p class="lead text-start m-2">
				<ValidationMessage For="() => Model.SearchStr" />
			</p>
		</EditForm>
	</div>
</div>

@if (loaded)
{
    <hr class="my-5" />

    <UserProfile Snowflake=SearchId />
}


@code {
    public const string SnowflakeRegex = "^(\\d{17,21})$";

    [Parameter] public string? UserIdStr { get; set; }
    public ulong SearchId { get; set; }

    private bool loaded = false;

    protected SearchModel Model { get; set; } = new();
    protected EditContext? EditContext { get; set; }

    protected override Task OnParametersSetAsync()
    {
        EditContext = new(Model);
        EditContext.OnFieldChanged += SetCurrentProfileSnowflake;

        if (UserIdStr is not null)
        {
            Model.SearchStr = UserIdStr;
            loaded = true;
        }

        return base.OnParametersSetAsync();
    }


    public void SetCurrentProfileSnowflake(object? _1, FieldChangedEventArgs _2)
    {
        loaded = false;

        if (EditContext!.Validate())
        {
            SearchId = Convert.ToUInt64(Model.SearchStr);
            loaded = true;
        }
    }

    public record SearchModel
    {
        [Required, RegularExpression("^(\\d{17,21})$", ErrorMessage = "Invalid Snowflake.")]
        public string? SearchStr { get; set; }
    }
}