@page "/emitter"
@page "/emitter/{EmitterName?}"
@inject NavigationManager NavigationManager


<div class="row justify-content-around text-center mb-5">
    <div class="col col-lg-8">
        <h3 class="my-3">Search for Emitter :</h3>

        <EditForm EditContext=EditContext>
            <DataAnnotationsValidator />

            <div class="input-group input-group-lg">
                <InputText @bind-Value=Model.SearchStr class="form-control" placeholder="Emitter ID" />
            </div>

            <p class="lead text-start m-2">
                <ValidationMessage For="() => Model.SearchStr" />
            </p>
        </EditForm>
    </div>
</div>

@if (_loaded)
{
    <hr class="my-5" />

    <ErrorBoundary>
        <ChildContent>
            <EmitterProfile EmitterName=@EmitterName />
        </ChildContent>

        <ErrorContent>
            <h3 class="text-danger">An error occured loading Emitter "@EmitterName".</h3>
        </ErrorContent>
    </ErrorBoundary>
}


@code {
    [Parameter] public string? EmitterName { get; set; }

    private bool _loaded = false;

    protected SearchModel Model { get; set; } = new();
    protected EditContext? EditContext { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        EditContext = new(Model);
        EditContext.OnFieldChanged += SetCurrentEmitterId;

        if (EmitterName is not null)
        {
            Model.SearchStr = EmitterName;
            _loaded = true;
        }

        await base.OnParametersSetAsync();
    }


    public void SetCurrentEmitterId(object? _1, FieldChangedEventArgs _2)
    {
        _loaded = false;

        if (EditContext!.Validate())
        {
            EmitterName = Model.SearchStr;
            _loaded = true;
        }
    }

    public sealed record SearchModel
    {
        [Required, MaxLength(100)]
        public string? SearchStr { get; set; }
    }
}